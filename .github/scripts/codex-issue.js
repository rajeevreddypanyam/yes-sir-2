import fs from "fs";
import path from "path";
import { Octokit } from "@octokit/rest";
import OpenAI from "openai";
import { execSync } from "child_process";

const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

async function run() {
  const ev = JSON.parse(fs.readFileSync(process.env.GITHUB_EVENT_PATH, "utf8"));
  const repoFull = process.env.GITHUB_REPOSITORY;
  const [owner, repo] = repoFull.split("/");

  const issue = ev.issue;
  if (!issue || issue.state !== "open") return;
  if (!issue.body || !issue.body.includes("@codex")) return;

  const title = issue.title;
  const body = issue.body;
  const branch = `codex/${issue.number}-${title.toLowerCase().replace(/[^a-z0-9]+/g, "-").slice(0, 40)}`;

  // Create new branch
  execSync("git config user.name 'Codex Bot'");
  execSync("git config user.email 'codex-bot@neoglobalindustries.com'");
  execSync(`git fetch origin main`);
  execSync(`git checkout -b ${branch} origin/main`);

  // Load docs
  const docsDir = path.join(process.cwd(), "docs");
  const docs = fs.existsSync(docsDir)
    ? fs.readdirSync(docsDir).filter(f => f.endsWith(".md")).slice(0, 12)
      .map(f => "# " + f + "\n" + fs.readFileSync(path.join(docsDir, f), "utf8"))
      .join("\n\n---\n\n")
    : "No docs folder.";

  const prompt = `
You are Codex, an autonomous Flutter engineer.
Issue title: ${title}
Description: ${body}

Read the following docs for full context:
${docs}

Modify or create files inside apps/app_flutter/** or lib/** to complete this feature or fix.
Return only the full code content for any modified files (inside code fences).
`;

  const res = await openai.chat.completions.create({
    model: "gpt-5",
    messages: [{ role: "user", content: prompt }],
    temperature: 0.3
  });

  const reply = res.choices[0].message.content || "";
  const codeBlocks = [...reply.matchAll(/```([\s\S]*?)```/g)];
  for (const block of codeBlocks) {
    const lines = block[1].split("\n");
    const first = lines[0].trim();
    const filePath = first.startsWith("apps/") || first.startsWith("lib/") ? first : null;
    if (!filePath) continue;

    const content = lines.slice(1).join("\n");
    fs.mkdirSync(path.dirname(filePath), { recursive: true });
    fs.writeFileSync(filePath, content, "utf8");

    execSync(`git add "${filePath}"`);
  }

  execSync(`git commit -m "🤖 Codex: auto implement issue #${issue.number} - ${title}" || echo "nothing to commit"`);
  execSync(`git push origin ${branch}`);

  // Create PR
  const { data: pr } = await octokit.rest.pulls.create({
    owner,
    repo,
    title: `Codex: ${title}`,
    head: branch,
    base: "main",
    body: `Auto-generated by Codex for issue #${issue.number}\n\n${body}`
  });

  await octokit.rest.issues.createComment({
    owner,
    repo,
    issue_number: issue.number,
    body: `🚀 Codex created [PR #${pr.number}](${pr.html_url}) for your request and will deploy a preview automatically.`
  });
}

run().catch(e => {
  console.error(e);
  process.exit(1);
});
